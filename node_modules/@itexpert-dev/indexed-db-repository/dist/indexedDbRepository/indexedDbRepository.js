"use strict";
var tiny_helpers_1 = require("@itexpert-dev/tiny-helpers");
var rxjs_1 = require("rxjs");
var BaseIndexedDBRepository = (function () {
    function BaseIndexedDBRepository(dbName, dbVersion) {
        this.dbName = dbName;
        this.dbVersion = dbVersion;
        if (!window.hasOwnProperty('indexedDB')) {
            throw new Error('indexedDB not support');
        }
        var request = indexedDB.open(dbName, dbVersion);
        request.onsuccess = this.constructorOnSuccessOpen;
        request.onupgradeneeded = this.constructorOnUpgradeNeeded;
        request.onerror = this.constructorOnError;
    }
    BaseIndexedDBRepository.prototype.constructorOnSuccessOpen = function (e) {
        var db = e.target.result;
        db.close();
    };
    BaseIndexedDBRepository.prototype.constructorOnUpgradeNeeded = function (e) {
        console.log('need upgrade');
    };
    BaseIndexedDBRepository.prototype.constructorOnError = function (e) {
        console.log("error: " + e);
    };
    BaseIndexedDBRepository.prototype.connect = function () {
        var querySubject = new rxjs_1.Subject();
        var request = indexedDB.open(this.dbName, this.dbVersion);
        request.onsuccess = function (e) {
            var db = e.target.result;
            querySubject.next(db);
            querySubject.complete();
        };
        request.onerror = function (e) {
            querySubject.error("connect request error");
            querySubject.complete();
        };
        return querySubject;
    };
    BaseIndexedDBRepository.prototype.create = function (query) {
        var eventSubject = new rxjs_1.Subject();
        this.connect().subscribe(function (dbConnect) {
            var transaction = dbConnect.transaction([query.entity], 'readwrite')
                .objectStore(query.entity)
                .add(query.data);
            transaction.onsuccess = function (status) {
                var response = {
                    status: 'success'
                };
                eventSubject.next(response);
                eventSubject.complete();
            };
            transaction.onerror = function (error) {
                var response = {
                    status: 'error',
                    message: transaction.error.toString()
                };
                eventSubject.error(response);
                eventSubject.complete();
            };
        });
        return eventSubject;
    };
    BaseIndexedDBRepository.prototype.read = function (query) {
        var eventsSubject = new rxjs_1.Subject();
        this.connect().subscribe(function (dbConnect) {
            var transaction = dbConnect.transaction([query.entity], 'readonly');
            var objStore = transaction.objectStore(query.entity);
            if (tiny_helpers_1.isNullOrUndefined(query.filter)) {
                var hasLimit = tiny_helpers_1.isNullOrUndefined(query.limit);
                var resultData_1 = {
                    data: [],
                    totalResult: null
                };
                var cursorStore = objStore.openCursor();
                var currentOffset_1 = 0;
                cursorStore.onsuccess = function (event) {
                    var target = event.target;
                    var cursor = target.result;
                    if (cursor !== null) {
                        if (resultData_1.data.length < query.limit && query.offset <= currentOffset_1) {
                            resultData_1.data.push(cursor.value);
                        }
                        else { }
                        currentOffset_1 += 1;
                        cursor.continue();
                    }
                    else {
                        resultData_1.totalResult = currentOffset_1;
                        eventsSubject.next(resultData_1);
                        eventsSubject.complete();
                    }
                };
            }
            else {
                if (tiny_helpers_1.isNullOrUndefined(query.filter) ||
                    tiny_helpers_1.isNullOrUndefined(query.filter.nodes) ||
                    tiny_helpers_1.isNullOrUndefined(query.filter.nodes[0].value)) {
                    eventsSubject.error("first filter value is null " + JSON.stringify(query));
                    eventsSubject.complete();
                }
                else {
                    var fieldBlock = query.filter.nodes[0];
                    var index = objStore.index(fieldBlock.field);
                    index.get(fieldBlock.value)
                        .onsuccess = function (e) {
                        eventsSubject.next({
                            data: [e.target.result],
                            totalResult: [e.target.result].length
                        });
                        eventsSubject.complete();
                    };
                }
            }
        });
        return eventsSubject;
    };
    BaseIndexedDBRepository.prototype.update = function (query) {
        return new rxjs_1.Subject();
    };
    BaseIndexedDBRepository.prototype.delete = function (query) {
        return new rxjs_1.Subject();
    };
    BaseIndexedDBRepository.prototype.metadata = function (query) {
        var querySubject = new rxjs_1.Subject();
        this.connect().subscribe(function (dbConnect) {
            var transaction = dbConnect.transaction(['metadata'], 'readonly');
            var objStore = transaction.objectStore('metadata')
                .index('entityName')
                .get(query.entity)
                .onsuccess = function (e) {
                var response = {
                    verboseName: query.entity,
                    properties: e.target.result.meta
                };
                querySubject.next(response);
                querySubject.complete();
            };
        });
        return querySubject;
    };
    return BaseIndexedDBRepository;
}());
exports.BaseIndexedDBRepository = BaseIndexedDBRepository;
//# sourceMappingURL=indexedDbRepository.js.map