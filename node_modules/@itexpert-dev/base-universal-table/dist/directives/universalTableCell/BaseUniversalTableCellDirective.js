"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var baseUniversalTableDirective_1 = require("../common/baseUniversalTableDirective");
var core_1 = require("@angular/core");
var angularInputValidator_1 = require("../common/angularInputValidator");
var tiny_helpers_1 = require("@itexpert-dev/tiny-helpers");
var baseUniversalTableCellDirectiveConfig_const_1 = require("./baseUniversalTableCellDirectiveConfig.const");
var UniversalTableCellPosition_1 = require("./UniversalTableCellPosition");
var BaseUniversalTableCellDirective = (function (_super) {
    __extends(BaseUniversalTableCellDirective, _super);
    function BaseUniversalTableCellDirective(tableCtrl, componentResolver, viewContainer, injector) {
        var _this = _super.call(this, componentResolver, viewContainer, tableCtrl) || this;
        _this.injector = injector;
        return _this;
    }
    BaseUniversalTableCellDirective.prototype.ngOnInit = function () {
        var validateResult = angularInputValidator_1.AngularInputValidator.checkRequireAttributes({
            requireAttributes: ['rowIndex', 'cellIndex', 'cellData'],
            directiveContext: this,
            rightExample: baseUniversalTableCellDirectiveConfig_const_1.baseUniversalTableCellDirectiveConfig.selector + "((\"[rowIndex]\"=\"rowIndex\", \"[cellIndex]\"=\"cellIndex\", \"[cellData]\"=\"cellData\")"
        });
        if (!tiny_helpers_1.isNull(validateResult)) {
            throw validateResult;
        }
        var originCell = this.cellData;
        var cellType = originCell.type;
        var cellComponent = this.resolveCellByType(cellType);
        var cellPosition = {
            cellData: this.cellData,
            cellIndex: this.cellIndex,
            rowIndex: this.rowIndex
        };
        var injector = core_1.ReflectiveInjector.resolveAndCreate([{
                provide: UniversalTableCellPosition_1.UniversalTableCellPosition,
                useValue: cellPosition
            }], this.injector);
        var cell = this.viewContainer.createComponent(cellComponent, 0, injector);
        originCell.instance = cell.instance;
    };
    return BaseUniversalTableCellDirective;
}(baseUniversalTableDirective_1.BaseUniversalTableDirective));
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], BaseUniversalTableCellDirective.prototype, "rowIndex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], BaseUniversalTableCellDirective.prototype, "cellIndex", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], BaseUniversalTableCellDirective.prototype, "cellData", void 0);
exports.BaseUniversalTableCellDirective = BaseUniversalTableCellDirective;
//# sourceMappingURL=BaseUniversalTableCellDirective.js.map