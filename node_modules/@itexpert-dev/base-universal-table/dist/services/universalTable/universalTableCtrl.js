"use strict";
var key_value_storage_1 = require("@itexpert-dev/key-value-storage");
var rxjs_1 = require("rxjs");
var universalTableDataPreprocessors_1 = require("./universalTableDataPreprocessors");
var baseUniversalTableConfigurator_1 = require("./baseUniversalTableConfigurator/baseUniversalTableConfigurator");
exports.UniversalTableConfigurator = baseUniversalTableConfigurator_1.UniversalTableConfigurator;
var UniversalTableCtrl = (function () {
    function UniversalTableCtrl(initParams, config) {
        var _this = this;
        this.initParams = initParams;
        this.config = config;
        this.headers = new rxjs_1.ReplaySubject(1);
        this.rows = new rxjs_1.ReplaySubject(1);
        /**
         * @desc object for ui bind handlers and templates
         * @type {IUniversalTableViewScope}
         */
        this.viewScope = {
            headers: this.headers.map(function (next) { return _this.dataPreprocessors.parseHeaders(next.viewFields, next.metadata); }),
            rows: this.rows.map(function (next) { return _this.dataPreprocessors.parseData(next.viewFields, next); }),
            totalResult: 0
        };
        this.stateStream = new rxjs_1.ReplaySubject(1);
        /**
         * @desc ctrl instance components for render UI
         * @type {IUniversalTableComponents}
         */
        this.tableComponents = {};
        //storage for refs in template for inject components
        this.viewContainerRefs = new key_value_storage_1.KeyValueStorage();
        this.dataPreprocessors = universalTableDataPreprocessors_1.UniversalTableDataPreprocessors;
        this.currentState = {};
        this.stateStream.subscribe(function (next) {
            Object.assign(_this.currentState, next);
        });
        this.updateCurrentState({ isInit: false });
        //fix empty components map
        if (!this.initParams.hasOwnProperty('componentsMap')) {
            this.initParams.componentsMap = {};
        }
        //apply local config by default and init config
        Object.assign(this.tableComponents, this.config.getDefaultComponents(), this.initParams.componentsMap);
        Object.assign(this.currentState, this.config.getDefaultInitTableState(), this.initParams.initState);
    }
    UniversalTableCtrl.prototype.updateCurrentState = function (state) {
        this.stateStream.next(Object.assign({}, this.currentState, state));
    };
    UniversalTableCtrl.prototype.resolveInit = function () {
        this.updateCurrentState({ isInit: true });
    };
    ;
    UniversalTableCtrl.prototype.getRequireFields = function (state, request) {
        var requireFields;
        if (!state.hasOwnProperty('viewFields') || state.viewFields === null) {
            if (!state.hasOwnProperty('fields') || state.fields === null) {
                if (this.currentState === null || !this.currentState.hasOwnProperty('fields')) {
                    requireFields = [];
                    Object.keys(request.metadata).map(function (key) { return requireFields.push(key); });
                }
                else {
                    requireFields = this.currentState.fields;
                }
            }
            else {
                requireFields = state.fields;
            }
        }
        else {
            requireFields = state.viewFields;
        }
        return requireFields;
    };
    UniversalTableCtrl.prototype.updateState = function (state, options) {
        var _this = this;
        if (state === void 0) { state = {}; }
        if (options === void 0) { options = { enableStateDiff: true }; }
        var newState = {};
        if (options.enableStateDiff === true) {
            var diff_1 = {};
            var anyDiff_1 = false;
            Object.entries(state).map(function (_a) {
                var key = _a[0], val = _a[1];
                if (_this.currentState[key] !== val) {
                    anyDiff_1 = true;
                    diff_1[key] = val;
                }
            });
            if (anyDiff_1) {
                return this.setState(Object.assign({}, this.currentState, diff_1));
            }
            else {
                return rxjs_1.Observable.empty();
            }
        }
        else {
            Object.assign(newState, this.currentState, state);
        }
        return this.setState(newState);
    };
    UniversalTableCtrl.prototype.setState = function (state) {
        var _this = this;
        this.updateCurrentState({ isUpdate: true });
        var query = {
            fields: state.fields,
            filter: state.filter,
            limit: state.limit,
            offset: state.offset,
            sort: state.sort
        };
        return this.initParams
            .getDataMethod(query)
            .map(function (next) {
            return Object.assign(next, {
                state: Object.assign(state, {
                    totalResult: next.totalResult
                })
            });
        })
            .map(function (next) {
            var result = Object.assign(next, {
                viewFields: _this.getRequireFields(next.state, next)
            });
            return result;
        })
            .do(function (next) {
            _this.headers.next(next);
            _this.rows.next(next);
            _this.updateCurrentState(Object.assign(next.state, { isUpdate: false }));
        })
            .pluck('state');
    };
    return UniversalTableCtrl;
}());
exports.UniversalTableCtrl = UniversalTableCtrl;
//# sourceMappingURL=universalTableCtrl.js.map