import { IUniversalTableCtrlInitParams } from "./common/interfaces/IUniversalTableCtrlInitParams";
import { IUniversalTableState } from "./common/interfaces/IUniversalTableState";
import { IUniversalTableViewScope } from "./common/interfaces/IUniversalTableViewScope";
import { IUniversalTableComponents } from "./baseUniversalTableConfigurator/interfaces/IUniversalTableDefaultComponents";
import { KeyValueStorage } from '@itexpert-dev/key-value-storage';
import { Observable, Subject } from 'rxjs';
import { UniversalTableDataPreprocessors } from './universalTableDataPreprocessors';
import { UniversalTableConfigurator } from "./baseUniversalTableConfigurator/baseUniversalTableConfigurator";
declare class UniversalTableCtrl {
    initParams: IUniversalTableCtrlInitParams;
    config: UniversalTableConfigurator;
    private headers;
    private rows;
    /**
     * @desc object for ui bind handlers and templates
     * @type {IUniversalTableViewScope}
     */
    viewScope: IUniversalTableViewScope;
    currentState: IUniversalTableState;
    stateStream: Subject<IUniversalTableState>;
    /**
     * @desc ctrl instance components for render UI
     * @type {IUniversalTableComponents}
     */
    tableComponents: IUniversalTableComponents;
    viewContainerRefs: KeyValueStorage<any>;
    dataPreprocessors: typeof UniversalTableDataPreprocessors;
    constructor(initParams: IUniversalTableCtrlInitParams, config: UniversalTableConfigurator);
    private updateCurrentState(state);
    resolveInit(): void;
    private getRequireFields(state, request);
    updateState(state?: IUniversalTableState, options?: {
        enableStateDiff: boolean;
    }): Observable<null>;
    private setState(state);
}
export { UniversalTableCtrl, IUniversalTableCtrlInitParams, IUniversalTableViewScope, IUniversalTableState, UniversalTableConfigurator };
