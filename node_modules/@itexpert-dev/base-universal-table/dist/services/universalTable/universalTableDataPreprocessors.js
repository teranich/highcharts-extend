"use strict";
var tiny_helpers_1 = require("@itexpert-dev/tiny-helpers");
var UniversalTableDataPreprocessors = (function () {
    function UniversalTableDataPreprocessors() {
    }
    UniversalTableDataPreprocessors.parseData = function (viewFields, response) {
        var rows = [];
        for (var _i = 0, _a = response.data; _i < _a.length; _i++) {
            var requestRow = _a[_i];
            var viewRow = {
                cells: []
            };
            for (var _b = 0, viewFields_1 = viewFields; _b < viewFields_1.length; _b++) {
                var field = viewFields_1[_b];
                var cell = void 0;
                if (requestRow.hasOwnProperty(field)) {
                    cell = {
                        type: response.metadata[field].type,
                        value: requestRow[field].value
                    };
                }
                else {
                    cell = {
                        type: null,
                        value: null
                    };
                }
                viewRow.cells.push(cell);
            }
            rows.push(viewRow);
        }
        return rows;
    };
    UniversalTableDataPreprocessors.parseHeaders = function (viewFields, metadata) {
        var notFoundFieldsBucket = [];
        var headers = [];
        for (var _i = 0, viewFields_2 = viewFields; _i < viewFields_2.length; _i++) {
            var metaField = viewFields_2[_i];
            if (!tiny_helpers_1.isNullOrUndefined(metadata[metaField])) {
                var header = {
                    label: metadata[metaField].verboseName
                };
                headers.push(header);
            }
            else {
                notFoundFieldsBucket.push(metaField);
            }
        }
        if (notFoundFieldsBucket.length > 0) {
            throw new Error("fields: [" + notFoundFieldsBucket.join(', ') + "] not found in metadata\ncurrent metadata: " + metadata);
        }
        return headers;
    };
    return UniversalTableDataPreprocessors;
}());
exports.UniversalTableDataPreprocessors = UniversalTableDataPreprocessors;
//# sourceMappingURL=universalTableDataPreprocessors.js.map